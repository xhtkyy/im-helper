<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: im/v1/schema.proto

namespace Im\V1\Data;

use UnexpectedValueException;

/**
 * 数据交换的适用范围的期望，防止隐私数据意外发送，具体的范围由业务和云端算法控制
 *
 * Protobuf type <code>im.v1.Data.Scope</code>
 */
class Scope
{
    /**
     * 默认，禁止数据交换
     *
     * Generated from protobuf enum <code>DENY = 0;</code>
     */
    const DENY = 0;
    /**
     * 限用户自己的数据交换
     *
     * Generated from protobuf enum <code>SELF = 1;</code>
     */
    const SELF = 1;
    /**
     * 好友
     *
     * Generated from protobuf enum <code>PAIR = 2;</code>
     */
    const PAIR = 2;
    /**
     * 任意用户
     *
     * Generated from protobuf enum <code>ANY = 3;</code>
     */
    const ANY = 3;

    private static $valueToName = [
        self::DENY => 'DENY',
        self::SELF => 'SELF',
        self::PAIR => 'PAIR',
        self::ANY => 'ANY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Scope::class, \Im\V1\Data_Scope::class);

