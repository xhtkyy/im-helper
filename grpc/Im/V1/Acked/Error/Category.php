<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: im/v1/schema.proto

namespace Im\V1\Acked\Error;

use UnexpectedValueException;

/**
 * Protobuf type <code>im.v1.Acked.Error.Category</code>
 */
class Category
{
    /**
     * 有错误发生，但具体原因见错误码和描述（通常还需要程序员检查日志）
     *
     * Generated from protobuf enum <code>UNKNOWN = 0;</code>
     */
    const UNKNOWN = 0;
    /**
     * 直接重试
     *
     * Generated from protobuf enum <code>RETRY = 1;</code>
     */
    const RETRY = 1;
    /**
     * 消息数据格式/协议：错误
     *
     * Generated from protobuf enum <code>INVALID_PROTOCOL = 2;</code>
     */
    const INVALID_PROTOCOL = 2;
    /**
     * 数字签名：无效
     *
     * Generated from protobuf enum <code>SIGNATURE_INVALID = 3;</code>
     */
    const SIGNATURE_INVALID = 3;
    /**
     * 访问权限：相关错误
     *
     * Generated from protobuf enum <code>ACCESS_DENIED = 4;</code>
     */
    const ACCESS_DENIED = 4;
    /**
     * 未找到目标对象或资源
     *
     * Generated from protobuf enum <code>NOT_FOUND = 5;</code>
     */
    const NOT_FOUND = 5;
    /**
     * 使用的设备被拒绝
     *
     * Generated from protobuf enum <code>DEVICE_DENIED = 6;</code>
     */
    const DEVICE_DENIED = 6;
    /**
     * 跨域消息，对方网关报错
     *
     * Generated from protobuf enum <code>GATEWAY = 7;</code>
     */
    const GATEWAY = 7;
    /**
     * 消息异常
     *
     * Generated from protobuf enum <code>MESSAGE = 8;</code>
     */
    const MESSAGE = 8;
    /**
     * 被拒绝，指定接收方不接收消息，通常为关系链异常
     *
     * Generated from protobuf enum <code>DENIED = 9;</code>
     */
    const DENIED = 9;
    /**
     * 访问超频
     *
     * Generated from protobuf enum <code>LIMIT_RATE = 10;</code>
     */
    const LIMIT_RATE = 10;

    private static $valueToName = [
        self::UNKNOWN => 'UNKNOWN',
        self::RETRY => 'RETRY',
        self::INVALID_PROTOCOL => 'INVALID_PROTOCOL',
        self::SIGNATURE_INVALID => 'SIGNATURE_INVALID',
        self::ACCESS_DENIED => 'ACCESS_DENIED',
        self::NOT_FOUND => 'NOT_FOUND',
        self::DEVICE_DENIED => 'DEVICE_DENIED',
        self::GATEWAY => 'GATEWAY',
        self::MESSAGE => 'MESSAGE',
        self::DENIED => 'DENIED',
        self::LIMIT_RATE => 'LIMIT_RATE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Category::class, \Im\V1\Acked_Error_Category::class);

