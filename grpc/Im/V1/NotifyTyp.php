<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: im/v1/sync.proto

namespace Im\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>im.v1.NotifyTyp</code>
 */
class NotifyTyp
{
    /**
     * 知行提醒
     *
     * Generated from protobuf enum <code>APP_KNOW = 0;</code>
     */
    const APP_KNOW = 0;
    /**
     * 广场提醒
     *
     * Generated from protobuf enum <code>APP_SQUARE = 1;</code>
     */
    const APP_SQUARE = 1;
    /**
     * 全部提醒
     *
     * Generated from protobuf enum <code>APP_NOTIFY = 2;</code>
     */
    const APP_NOTIFY = 2;
    /**
     * 云盘提醒
     *
     * Generated from protobuf enum <code>APP_CLOUD_DISK = 3;</code>
     */
    const APP_CLOUD_DISK = 3;
    /**
     *审批
     *
     * Generated from protobuf enum <code>APP_APPROVAL = 4;</code>
     */
    const APP_APPROVAL = 4;
    /**
     *通讯录
     *
     * Generated from protobuf enum <code>APP_ADDRESS_BOOK = 5;</code>
     */
    const APP_ADDRESS_BOOK = 5;
    /**
     *组织
     *
     * Generated from protobuf enum <code>APP_TEAMS = 6;</code>
     */
    const APP_TEAMS = 6;

    private static $valueToName = [
        self::APP_KNOW => 'APP_KNOW',
        self::APP_SQUARE => 'APP_SQUARE',
        self::APP_NOTIFY => 'APP_NOTIFY',
        self::APP_CLOUD_DISK => 'APP_CLOUD_DISK',
        self::APP_APPROVAL => 'APP_APPROVAL',
        self::APP_ADDRESS_BOOK => 'APP_ADDRESS_BOOK',
        self::APP_TEAMS => 'APP_TEAMS',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

