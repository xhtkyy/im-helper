<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: im/v1/schema.proto

namespace Im\V1\IO;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * 设备类型
 *
 * Generated from protobuf message <code>im.v1.IO.Device</code>
 */
class Device extends \Google\Protobuf\Internal\Message
{
    /**
     * 接入设备：类型
     *
     * Generated from protobuf field <code>.im.v1.IO.Device.Type type = 1;</code>
     */
    protected $type = 0;
    /**
     * 接入设备：序列号，从设备注册表
     *
     * Generated from protobuf field <code>string sn = 2;</code>
     */
    protected $sn = '';

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type int $type
     *           接入设备：类型
     *     @type string $sn
     *           接入设备：序列号，从设备注册表
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Im\V1\Schema::initOnce();
        parent::__construct($data);
    }

    /**
     * 接入设备：类型
     *
     * Generated from protobuf field <code>.im.v1.IO.Device.Type type = 1;</code>
     * @return int
     */
    public function getType()
    {
        return $this->type;
    }

    /**
     * 接入设备：类型
     *
     * Generated from protobuf field <code>.im.v1.IO.Device.Type type = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setType($var)
    {
        GPBUtil::checkEnum($var, \Im\V1\IO\Device\Type::class);
        $this->type = $var;

        return $this;
    }

    /**
     * 接入设备：序列号，从设备注册表
     *
     * Generated from protobuf field <code>string sn = 2;</code>
     * @return string
     */
    public function getSn()
    {
        return $this->sn;
    }

    /**
     * 接入设备：序列号，从设备注册表
     *
     * Generated from protobuf field <code>string sn = 2;</code>
     * @param string $var
     * @return $this
     */
    public function setSn($var)
    {
        GPBUtil::checkString($var, True);
        $this->sn = $var;

        return $this;
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Device::class, \Im\V1\IO_Device::class);

