<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: im/v1/schema.proto

namespace Im\V1;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * !!! 统一消息：标准消息单元
 *
 * Generated from protobuf message <code>im.v1.Unit</code>
 */
class Unit extends \Google\Protobuf\Internal\Message
{
    protected $message;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Im\V1\Acked $acked
     *           应答
     *     @type \Im\V1\Unified $unified
     *           普通消息
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Im\V1\Schema::initOnce();
        parent::__construct($data);
    }

    /**
     * 应答
     *
     * Generated from protobuf field <code>.im.v1.Acked acked = 1;</code>
     * @return \Im\V1\Acked|null
     */
    public function getAcked()
    {
        return $this->readOneof(1);
    }

    public function hasAcked()
    {
        return $this->hasOneof(1);
    }

    /**
     * 应答
     *
     * Generated from protobuf field <code>.im.v1.Acked acked = 1;</code>
     * @param \Im\V1\Acked $var
     * @return $this
     */
    public function setAcked($var)
    {
        GPBUtil::checkMessage($var, \Im\V1\Acked::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * 普通消息
     *
     * Generated from protobuf field <code>.im.v1.Unified unified = 2;</code>
     * @return \Im\V1\Unified|null
     */
    public function getUnified()
    {
        return $this->readOneof(2);
    }

    public function hasUnified()
    {
        return $this->hasOneof(2);
    }

    /**
     * 普通消息
     *
     * Generated from protobuf field <code>.im.v1.Unified unified = 2;</code>
     * @param \Im\V1\Unified $var
     * @return $this
     */
    public function setUnified($var)
    {
        GPBUtil::checkMessage($var, \Im\V1\Unified::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function getMessage()
    {
        return $this->whichOneof("message");
    }

}

