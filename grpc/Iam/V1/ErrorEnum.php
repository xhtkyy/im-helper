<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iam/v1/error.proto

namespace Iam\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>iam.v1.ErrorEnum</code>
 */
class ErrorEnum
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * 什么也没做
     *
     * Generated from protobuf enum <code>NOTHING = 1 [(.errors.code) = 400];</code>
     */
    const NOTHING = 1;
    /**
     * Generated from protobuf enum <code>LIMIT_RATE = 2 [(.errors.code) = 429];</code>
     */
    const LIMIT_RATE = 2;
    /**
     * Request invalid
     *
     * Generated from protobuf enum <code>REQUEST_PARAM_INVALID = 400 [(.errors.code) = 400];</code>
     */
    const REQUEST_PARAM_INVALID = 400;
    /**
     * Generated from protobuf enum <code>REQUEST_UNSUPPORTED = 401 [(.errors.code) = 400];</code>
     */
    const REQUEST_UNSUPPORTED = 401;
    /**
     * Generated from protobuf enum <code>REQUEST_EXPIRED = 402 [(.errors.code) = 400];</code>
     */
    const REQUEST_EXPIRED = 402;
    /**
     * 访问凭证失效
     *
     * Generated from protobuf enum <code>ACCESS_TOKEN_INVALID = 420 [(.errors.code) = 400];</code>
     */
    const ACCESS_TOKEN_INVALID = 420;
    /**
     * 刷新凭证失效
     *
     * Generated from protobuf enum <code>REFRESH_TOKEN_INVALID = 421 [(.errors.code) = 400];</code>
     */
    const REFRESH_TOKEN_INVALID = 421;
    /**
     * PROOF invalid
     *
     * Generated from protobuf enum <code>PROOF_INVALID = 430 [(.errors.code) = 400];</code>
     */
    const PROOF_INVALID = 430;
    /**
     * 向第三方提供商请求发生错误
     *
     * Generated from protobuf enum <code>PROVIDER_ERROR = 450 [(.errors.code) = 400];</code>
     */
    const PROVIDER_ERROR = 450;
    /**
     *
     * Generated from protobuf enum <code>NOT_CHANGE = 489 [(.errors.code) = 400];</code>
     */
    const NOT_CHANGE = 489;
    /**
     * Generated from protobuf enum <code>USER_ID_FOUND = 490 [(.errors.code) = 400];</code>
     */
    const USER_ID_FOUND = 490;
    /**
     * Generated from protobuf enum <code>VERIFY_CODE_INVALID = 491 [(.errors.code) = 400];</code>
     */
    const VERIFY_CODE_INVALID = 491;
    /**
     * Generated from protobuf enum <code>PASSWORD_INVALID = 492 [(.errors.code) = 400];</code>
     */
    const PASSWORD_INVALID = 492;
    /**
     * Generated from protobuf enum <code>USER_EXISTED = 493 [(.errors.code) = 400];</code>
     */
    const USER_EXISTED = 493;
    /**
     * Generated from protobuf enum <code>USER_NOT_EXISTED = 494 [(.errors.code) = 400];</code>
     */
    const USER_NOT_EXISTED = 494;
    /**
     * Generated from protobuf enum <code>USER_LOCKED = 495 [(.errors.code) = 400];</code>
     */
    const USER_LOCKED = 495;
    /**
     * 密码未启用
     *
     * Generated from protobuf enum <code>PASSWORD_NOT_ENABLE = 496 [(.errors.code) = 400];</code>
     */
    const PASSWORD_NOT_ENABLE = 496;
    /**
     * 验证码过期
     *
     * Generated from protobuf enum <code>VERIFY_CODE_EXPIRE = 497 [(.errors.code) = 400];</code>
     */
    const VERIFY_CODE_EXPIRE = 497;
    /**
     * 不能为空
     *
     * Generated from protobuf enum <code>NOT_EMPTY = 498 [(.errors.code) = 400];</code>
     */
    const NOT_EMPTY = 498;
    /**
     * 超出限制
     *
     * Generated from protobuf enum <code>OVER_LIMIT = 499 [(.errors.code) = 400];</code>
     */
    const OVER_LIMIT = 499;
    /**
     * 另可ID已存在
     *
     * Generated from protobuf enum <code>RING_KOL_EXISTED = 500 [(.errors.code) = 400];</code>
     */
    const RING_KOL_EXISTED = 500;
    /**
     * 需要身份验证
     *
     * Generated from protobuf enum <code>UNAUTHORIZED = 30 [(.errors.code) = 401];</code>
     */
    const UNAUTHORIZED = 30;
    /**
     * 被封禁
     *
     * Generated from protobuf enum <code>ACCOUNT_DISABLED = 31 [(.errors.code) = 401];</code>
     */
    const ACCOUNT_DISABLED = 31;
    /**
     * 缺失头
     *
     * Generated from protobuf enum <code>HEADER_MISSING = 16 [(.errors.code) = 401];</code>
     */
    const HEADER_MISSING = 16;
    /**
     * 访问拒绝，权限或级别不够
     *
     * Generated from protobuf enum <code>ACCESS_DENIED = 40 [(.errors.code) = 403];</code>
     */
    const ACCESS_DENIED = 40;
    /**
     * 抢登
     *
     * Generated from protobuf enum <code>ONLINE_ANOTHER_DEVICE = 41 [(.errors.code) = 403];</code>
     */
    const ONLINE_ANOTHER_DEVICE = 41;
    /**
     * 抢登
     *
     * Generated from protobuf enum <code>TOKEN_SIGN_INVALID = 17 [(.errors.code) = 403];</code>
     */
    const TOKEN_SIGN_INVALID = 17;
    /**
     * Generated from protobuf enum <code>RESOURCE_NOT_FOUND = 50 [(.errors.code) = 404];</code>
     */
    const RESOURCE_NOT_FOUND = 50;
    /**
     * Generated from protobuf enum <code>DEVICE_NOT_SUPPORTED = 80 [(.errors.code) = 418];</code>
     */
    const DEVICE_NOT_SUPPORTED = 80;
    /**
     * Generated from protobuf enum <code>SERVER_INTERNAL_BUSY = 100 [(.errors.code) = 500];</code>
     */
    const SERVER_INTERNAL_BUSY = 100;
    /**
     * Generated from protobuf enum <code>NOT_IMPLEMENTED = 101 [(.errors.code) = 500];</code>
     */
    const NOT_IMPLEMENTED = 101;
    /**
     * Generated from protobuf enum <code>REQUEST_FAILED = 110 [(.errors.code) = 500];</code>
     */
    const REQUEST_FAILED = 110;
    /**
     * Generated from protobuf enum <code>QRCODE_EXPIRE = 111 [(.errors.code) = 500];</code>
     */
    const QRCODE_EXPIRE = 111;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::NOTHING => 'NOTHING',
        self::LIMIT_RATE => 'LIMIT_RATE',
        self::REQUEST_PARAM_INVALID => 'REQUEST_PARAM_INVALID',
        self::REQUEST_UNSUPPORTED => 'REQUEST_UNSUPPORTED',
        self::REQUEST_EXPIRED => 'REQUEST_EXPIRED',
        self::ACCESS_TOKEN_INVALID => 'ACCESS_TOKEN_INVALID',
        self::REFRESH_TOKEN_INVALID => 'REFRESH_TOKEN_INVALID',
        self::PROOF_INVALID => 'PROOF_INVALID',
        self::PROVIDER_ERROR => 'PROVIDER_ERROR',
        self::NOT_CHANGE => 'NOT_CHANGE',
        self::USER_ID_FOUND => 'USER_ID_FOUND',
        self::VERIFY_CODE_INVALID => 'VERIFY_CODE_INVALID',
        self::PASSWORD_INVALID => 'PASSWORD_INVALID',
        self::USER_EXISTED => 'USER_EXISTED',
        self::USER_NOT_EXISTED => 'USER_NOT_EXISTED',
        self::USER_LOCKED => 'USER_LOCKED',
        self::PASSWORD_NOT_ENABLE => 'PASSWORD_NOT_ENABLE',
        self::VERIFY_CODE_EXPIRE => 'VERIFY_CODE_EXPIRE',
        self::NOT_EMPTY => 'NOT_EMPTY',
        self::OVER_LIMIT => 'OVER_LIMIT',
        self::RING_KOL_EXISTED => 'RING_KOL_EXISTED',
        self::UNAUTHORIZED => 'UNAUTHORIZED',
        self::ACCOUNT_DISABLED => 'ACCOUNT_DISABLED',
        self::HEADER_MISSING => 'HEADER_MISSING',
        self::ACCESS_DENIED => 'ACCESS_DENIED',
        self::ONLINE_ANOTHER_DEVICE => 'ONLINE_ANOTHER_DEVICE',
        self::TOKEN_SIGN_INVALID => 'TOKEN_SIGN_INVALID',
        self::RESOURCE_NOT_FOUND => 'RESOURCE_NOT_FOUND',
        self::DEVICE_NOT_SUPPORTED => 'DEVICE_NOT_SUPPORTED',
        self::SERVER_INTERNAL_BUSY => 'SERVER_INTERNAL_BUSY',
        self::NOT_IMPLEMENTED => 'NOT_IMPLEMENTED',
        self::REQUEST_FAILED => 'REQUEST_FAILED',
        self::QRCODE_EXPIRE => 'QRCODE_EXPIRE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

