<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iam/v1/Error.proto

namespace Iam\V1;

use UnexpectedValueException;

/**
 * Protobuf type <code>iam.v1.ErrorEnum</code>
 */
class ErrorEnum
{
    /**
     * Generated from protobuf enum <code>UNSPECIFIED = 0;</code>
     */
    const UNSPECIFIED = 0;
    /**
     * Generated from protobuf enum <code>LIMIT_RATE = 2 [(.errors.code) = 429];</code>
     */
    const LIMIT_RATE = 2;
    /**
     * Request invalid
     *
     * Generated from protobuf enum <code>REQUEST_PARAM_INVALID = 400 [(.errors.code) = 400];</code>
     */
    const REQUEST_PARAM_INVALID = 400;
    /**
     * 未修改，与原来一致
     *
     * Generated from protobuf enum <code>NOT_CHANGE = 489 [(.errors.code) = 400];</code>
     */
    const NOT_CHANGE = 489;
    /**
     * Generated from protobuf enum <code>VERIFY_CODE_INVALID = 491 [(.errors.code) = 400];</code>
     */
    const VERIFY_CODE_INVALID = 491;
    /**
     * Generated from protobuf enum <code>PASSWORD_INVALID = 492 [(.errors.code) = 400];</code>
     */
    const PASSWORD_INVALID = 492;
    /**
     * Generated from protobuf enum <code>USER_EXISTED = 493 [(.errors.code) = 400];</code>
     */
    const USER_EXISTED = 493;
    /**
     * Generated from protobuf enum <code>USER_NOT_EXISTED = 494 [(.errors.code) = 400];</code>
     */
    const USER_NOT_EXISTED = 494;
    /**
     * Generated from protobuf enum <code>USER_LOCKED = 495 [(.errors.code) = 400];</code>
     */
    const USER_LOCKED = 495;
    /**
     * 密码未启用
     *
     * Generated from protobuf enum <code>PASSWORD_NOT_ENABLE = 496 [(.errors.code) = 400];</code>
     */
    const PASSWORD_NOT_ENABLE = 496;
    /**
     * 验证码过期
     *
     * Generated from protobuf enum <code>VERIFY_CODE_EXPIRE = 497 [(.errors.code) = 400];</code>
     */
    const VERIFY_CODE_EXPIRE = 497;
    /**
     * 不能为空
     *
     * Generated from protobuf enum <code>NOT_EMPTY = 498 [(.errors.code) = 400];</code>
     */
    const NOT_EMPTY = 498;
    /**
     * 超出限制
     *
     * Generated from protobuf enum <code>OVER_LIMIT = 499 [(.errors.code) = 400];</code>
     */
    const OVER_LIMIT = 499;
    /**
     * 另可ID已存在
     *
     * Generated from protobuf enum <code>RING_KOL_EXISTED = 500 [(.errors.code) = 400];</code>
     */
    const RING_KOL_EXISTED = 500;
    /**
     * 账号已存在
     *
     * Generated from protobuf enum <code>ACCOUNT_ALREADY_EXISTED = 501 [(.errors.code) = 400];</code>
     */
    const ACCOUNT_ALREADY_EXISTED = 501;
    /**
     * 账号注销组织检查失败
     *
     * Generated from protobuf enum <code>ACCOUNT_REMOVE_CHECK_TEAM = 502 [(.errors.code) = 400];</code>
     */
    const ACCOUNT_REMOVE_CHECK_TEAM = 502;
    /**
     * 账号注销广场检查失败
     *
     * Generated from protobuf enum <code>ACCOUNT_REMOVE_CHECK_SQUARE = 503 [(.errors.code) = 400];</code>
     */
    const ACCOUNT_REMOVE_CHECK_SQUARE = 503;
    /**
     * Generated from protobuf enum <code>QRCODE_EXPIRE = 504 [(.errors.code) = 400];</code>
     */
    const QRCODE_EXPIRE = 504;
    /**
     * 过期的JWT
     *
     * Generated from protobuf enum <code>TOKEN_EXPIRED = 18 [(.errors.code) = 401];</code>
     */
    const TOKEN_EXPIRED = 18;
    /**
     * 缺失请求头
     *
     * Generated from protobuf enum <code>HEADER_MISSING = 15 [(.errors.code) = 403];</code>
     */
    const HEADER_MISSING = 15;
    /**
     * 抢登
     *
     * Generated from protobuf enum <code>ONLINE_ANOTHER_DEVICE = 16 [(.errors.code) = 403];</code>
     */
    const ONLINE_ANOTHER_DEVICE = 16;
    /**
     * 签名无效的JWT
     *
     * Generated from protobuf enum <code>TOKEN_SIGN_INVALID = 17 [(.errors.code) = 403];</code>
     */
    const TOKEN_SIGN_INVALID = 17;
    /**
     * Generated from protobuf enum <code>DEVICE_NOT_SUPPORTED = 80 [(.errors.code) = 418];</code>
     */
    const DEVICE_NOT_SUPPORTED = 80;
    /**
     * Generated from protobuf enum <code>SERVER_INTERNAL_BUSY = 100 [(.errors.code) = 500];</code>
     */
    const SERVER_INTERNAL_BUSY = 100;

    private static $valueToName = [
        self::UNSPECIFIED => 'UNSPECIFIED',
        self::LIMIT_RATE => 'LIMIT_RATE',
        self::REQUEST_PARAM_INVALID => 'REQUEST_PARAM_INVALID',
        self::NOT_CHANGE => 'NOT_CHANGE',
        self::VERIFY_CODE_INVALID => 'VERIFY_CODE_INVALID',
        self::PASSWORD_INVALID => 'PASSWORD_INVALID',
        self::USER_EXISTED => 'USER_EXISTED',
        self::USER_NOT_EXISTED => 'USER_NOT_EXISTED',
        self::USER_LOCKED => 'USER_LOCKED',
        self::PASSWORD_NOT_ENABLE => 'PASSWORD_NOT_ENABLE',
        self::VERIFY_CODE_EXPIRE => 'VERIFY_CODE_EXPIRE',
        self::NOT_EMPTY => 'NOT_EMPTY',
        self::OVER_LIMIT => 'OVER_LIMIT',
        self::RING_KOL_EXISTED => 'RING_KOL_EXISTED',
        self::ACCOUNT_ALREADY_EXISTED => 'ACCOUNT_ALREADY_EXISTED',
        self::ACCOUNT_REMOVE_CHECK_TEAM => 'ACCOUNT_REMOVE_CHECK_TEAM',
        self::ACCOUNT_REMOVE_CHECK_SQUARE => 'ACCOUNT_REMOVE_CHECK_SQUARE',
        self::QRCODE_EXPIRE => 'QRCODE_EXPIRE',
        self::TOKEN_EXPIRED => 'TOKEN_EXPIRED',
        self::HEADER_MISSING => 'HEADER_MISSING',
        self::ONLINE_ANOTHER_DEVICE => 'ONLINE_ANOTHER_DEVICE',
        self::TOKEN_SIGN_INVALID => 'TOKEN_SIGN_INVALID',
        self::DEVICE_NOT_SUPPORTED => 'DEVICE_NOT_SUPPORTED',
        self::SERVER_INTERNAL_BUSY => 'SERVER_INTERNAL_BUSY',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

