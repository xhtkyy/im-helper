<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iam/v1/base.proto

namespace Iam\V1\Filter;

use Google\Protobuf\Internal\GPBType;
use Google\Protobuf\Internal\RepeatedField;
use Google\Protobuf\Internal\GPBUtil;

/**
 * Generated from protobuf message <code>iam.v1.Filter.Rule</code>
 */
class Rule extends \Google\Protobuf\Internal\Message
{
    protected $_;

    /**
     * Constructor.
     *
     * @param array $data {
     *     Optional. Data for populating the Message object.
     *
     *     @type \Iam\V1\Filter\PBMatch $match
     *     @type \Iam\V1\Filter\Group $group
     * }
     */
    public function __construct($data = NULL) {
        \GPBMetadata\Iam\V1\Base::initOnce();
        parent::__construct($data);
    }

    /**
     * Generated from protobuf field <code>.iam.v1.Filter.Match match = 1;</code>
     * @return \Iam\V1\Filter\PBMatch|null
     */
    public function getMatch()
    {
        return $this->readOneof(1);
    }

    public function hasMatch()
    {
        return $this->hasOneof(1);
    }

    /**
     * Generated from protobuf field <code>.iam.v1.Filter.Match match = 1;</code>
     * @param \Iam\V1\Filter\PBMatch $var
     * @return $this
     */
    public function setMatch($var)
    {
        GPBUtil::checkMessage($var, \Iam\V1\Filter\PBMatch::class);
        $this->writeOneof(1, $var);

        return $this;
    }

    /**
     * Generated from protobuf field <code>.iam.v1.Filter.Group group = 2;</code>
     * @return \Iam\V1\Filter\Group|null
     */
    public function getGroup()
    {
        return $this->readOneof(2);
    }

    public function hasGroup()
    {
        return $this->hasOneof(2);
    }

    /**
     * Generated from protobuf field <code>.iam.v1.Filter.Group group = 2;</code>
     * @param \Iam\V1\Filter\Group $var
     * @return $this
     */
    public function setGroup($var)
    {
        GPBUtil::checkMessage($var, \Iam\V1\Filter\Group::class);
        $this->writeOneof(2, $var);

        return $this;
    }

    /**
     * @return string
     */
    public function get()
    {
        return $this->whichOneof("_");
    }

}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Rule::class, \Iam\V1\Filter_Rule::class);

