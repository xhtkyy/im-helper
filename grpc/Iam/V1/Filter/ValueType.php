<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iam/v1/base.proto

namespace Iam\V1\Filter;

use UnexpectedValueException;

/**
 * Protobuf type <code>iam.v1.Filter.ValueType</code>
 */
class ValueType
{
    /**
     * 字符串
     *
     * Generated from protobuf enum <code>STRING = 0;</code>
     */
    const STRING = 0;
    /**
     * 整数
     *
     * Generated from protobuf enum <code>INT = 1;</code>
     */
    const INT = 1;
    /**
     * 浮点
     *
     * Generated from protobuf enum <code>FLOAT = 2;</code>
     */
    const FLOAT = 2;
    /**
     * 布尔
     *
     * Generated from protobuf enum <code>BOOLEAN = 3;</code>
     */
    const BOOLEAN = 3;
    /**
     * 适用于 LIKE 的通配符
     *
     * Generated from protobuf enum <code>WILDCARD = 4;</code>
     */
    const WILDCARD = 4;
    /**
     * 正则表达式
     *
     * Generated from protobuf enum <code>PATTERN = 5;</code>
     */
    const PATTERN = 5;
    /**
     * 字符串一维数组，适用于 IN 操作符
     *
     * Generated from protobuf enum <code>STR_ARRAY = 6;</code>
     */
    const STR_ARRAY = 6;
    /**
     * 整数一维数组，适用于 IN 操作符
     *
     * Generated from protobuf enum <code>INT_ARRAY = 7;</code>
     */
    const INT_ARRAY = 7;
    /**
     * 浮点数一维数组，适用于 IN 操作符
     *
     * Generated from protobuf enum <code>FLOAT_ARRAY = 8;</code>
     */
    const FLOAT_ARRAY = 8;
    /**
     * 空值
     *
     * Generated from protobuf enum <code>NIL = 9;</code>
     */
    const NIL = 9;

    private static $valueToName = [
        self::STRING => 'STRING',
        self::INT => 'INT',
        self::FLOAT => 'FLOAT',
        self::BOOLEAN => 'BOOLEAN',
        self::WILDCARD => 'WILDCARD',
        self::PATTERN => 'PATTERN',
        self::STR_ARRAY => 'STR_ARRAY',
        self::INT_ARRAY => 'INT_ARRAY',
        self::FLOAT_ARRAY => 'FLOAT_ARRAY',
        self::NIL => 'NIL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(ValueType::class, \Iam\V1\Filter_ValueType::class);

