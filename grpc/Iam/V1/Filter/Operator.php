<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iam/v1/base.proto

namespace Iam\V1\Filter;

use UnexpectedValueException;

/**
 * 操作符
 *
 * Protobuf type <code>iam.v1.Filter.Operator</code>
 */
class Operator
{
    /**
     * 相等
     *
     * Generated from protobuf enum <code>EQ = 0;</code>
     */
    const EQ = 0;
    /**
     * 大于
     *
     * Generated from protobuf enum <code>GT = 1;</code>
     */
    const GT = 1;
    /**
     * 小于
     *
     * Generated from protobuf enum <code>LT = 2;</code>
     */
    const LT = 2;
    /**
     * 大于等于
     *
     * Generated from protobuf enum <code>GTE = 3;</code>
     */
    const GTE = 3;
    /**
     * 小于等于
     *
     * Generated from protobuf enum <code>LTE = 4;</code>
     */
    const LTE = 4;
    /**
     * 在列表内
     *
     * Generated from protobuf enum <code>IN = 5;</code>
     */
    const IN = 5;
    /**
     * 简单的字符串匹配
     *
     * Generated from protobuf enum <code>LIKE = 6;</code>
     */
    const LIKE = 6;
    /**
     * 正则匹配
     *
     * Generated from protobuf enum <code>REGEXP = 7;</code>
     */
    const REGEXP = 7;
    /**
     * 空匹配
     *
     * Generated from protobuf enum <code>NULL = 8;</code>
     */
    const NULL = 8;

    private static $valueToName = [
        self::EQ => 'EQ',
        self::GT => 'GT',
        self::LT => 'LT',
        self::GTE => 'GTE',
        self::LTE => 'LTE',
        self::IN => 'IN',
        self::LIKE => 'LIKE',
        self::REGEXP => 'REGEXP',
        self::NULL => 'NULL',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no value defined for name %s', __CLASS__, $name));
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Operator::class, \Iam\V1\Filter_Operator::class);

