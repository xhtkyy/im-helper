<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: iam/v1/hub.proto

namespace Iam\V1\HostSchema;

use UnexpectedValueException;

/**
 * Protobuf type <code>iam.v1.HostSchema.Type</code>
 */
class Type
{
    /**
     * Generated from protobuf enum <code>PUBLIC = 0;</code>
     */
    const PBPUBLIC = 0;
    /**
     * Generated from protobuf enum <code>TENANT = 1;</code>
     */
    const TENANT = 1;
    /**
     * Generated from protobuf enum <code>PRIVATE = 2;</code>
     */
    const PBPRIVATE = 2;

    private static $valueToName = [
        self::PBPUBLIC => 'PUBLIC',
        self::TENANT => 'TENANT',
        self::PBPRIVATE => 'PRIVATE',
    ];

    public static function name($value)
    {
        if (!isset(self::$valueToName[$value])) {
            throw new UnexpectedValueException(sprintf(
                    'Enum %s has no name defined for value %s', __CLASS__, $value));
        }
        return self::$valueToName[$value];
    }


    public static function value($name)
    {
        $const = __CLASS__ . '::' . strtoupper($name);
        if (!defined($const)) {
            $pbconst =  __CLASS__. '::PB' . strtoupper($name);
            if (!defined($pbconst)) {
                throw new UnexpectedValueException(sprintf(
                        'Enum %s has no value defined for name %s', __CLASS__, $name));
            }
            return constant($pbconst);
        }
        return constant($const);
    }
}

// Adding a class alias for backwards compatibility with the previous class name.
class_alias(Type::class, \Iam\V1\HostSchema_Type::class);

